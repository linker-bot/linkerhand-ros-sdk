#!/usr/bin/env python3
import rospy,rospkg
import signal
from sensor_msgs.msg import JointState
from std_msgs.msg import String
import can
import json
import yaml
import time
import sys
import os
import subprocess
from std_msgs.msg import Header, Float32MultiArray
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from utils.linker_hand_l25_can import LinkerHandL25Can
from utils.color_msg import ColorMsg
from utils.open_can import OpenCan
global package_path
# 创建 rospkg.RosPack 对象
rospack = rospkg.RosPack()
# 获取指定包的路径
package_name = "linker_hand_sdk_ros"
package_path = rospack.get_path(package_name)
'''
# 左手


[159.0, 255.0, 255.0, 255.0, 255.0, 255.0, 112.0, 118.0, 143.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0]


大拇指弯曲+四指尖弯曲
rostopic pub /cb_left_hand_control_cmd sensor_msgs/JointState "{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''}, name: [], position: [239, 209, 237, 244, 0, 0, 120, 134, 134, 0, 175, 0, 0, 0, 0, 155, 209, 204, 163, 0, 58, 132, 130, 130, 0], velocity: [], effort: []}"

rostopic pub /cb_left_hand_control_cmd sensor_msgs/JointState "{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''}, name: [], position: [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128], velocity: [], effort: []}"

张开
rostopic pub /cb_left_hand_control_cmd sensor_msgs/JointState "{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''}, name: [], position: [216, 214, 224, 224, 0, 191, 134, 149, 163, 0, 170, 226, 0, 0, 0, 239, 255, 244, 242, 0, 252, 255, 232, 244, 0], velocity: [], effort: []}"

# 握拳
rostopic pub /cb_left_hand_control_cmd sensor_msgs/JointState "{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''}, name: [], position: [140, 206, 229, 232, 0, 255, 134, 127, 138, 0, 153, 163, 0, 0, 0, 165, 229, 224, 183, 0, 124, 130, 130, 130, 0], velocity: [], effort: []}"
'''
class LinkerHandL25:
    def __init__(self, leaphand=False):
        self.password = ""
        self.leaphand = leaphand
        self.can_status = False
        self.load_yaml()
        if (self.left_hand_exists == True and self.left_hand_joint != "L25") or (self.right_hand_exists == True and self.right_hand_joint != "L25"):
            ColorMsg(msg="当前SDK只支持L25手部", color="red")
            return
        time.sleep(0.1)
        if self.leaphand == False:
            self.speed = [250] * 4
        else:
            self.speed = [20] * 5
        ColorMsg(msg=f"SDK version:{self.sdk_version}", color="green")
        ColorMsg(msg=f"当前设置为:左手{self.left_hand_exists} JOINT:{self.left_hand_joint}", color="green")
        ColorMsg(msg=f"当前设置为:右手{self.right_hand_exists} JOINT:{self.right_hand_joint}", color="green")
        self.open_can0()
        time.sleep(0.01)
        self.is_can_up_sysfs()
        self.check_left_hand()
        self.check_right_hand()
        time.sleep(0.1)
        self.position_send()

    # 验证左手状态
    def check_left_hand(self):
        if self.left_hand_exists == True:
            self.left_hand_position = [0.0] * 25
            self.left_hand_can = LinkerHandL25Can(can_channel="can0", baudrate=1000000, can_id=0x28, config=self.config)
            self.left_hand_can.set_speed(speed=self.speed)
            ColorMsg(msg=f"设置左手速度:{self.speed}", color="green")
            time.sleep(1)
            #self.left_hand_can.set_finger_torque(torque=[200] * 4)
            joint_01, joint_02, joint_03, joint_04, joint_05, joint_06 = self.pose_slice(p=[159.0, 255.0, 255.0, 255.0, 255.0, 255.0, 112.0, 118.0, 143.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0])
            #joint_01, joint_02, joint_03, joint_04, joint_05, joint_06 = self.pose_slice(p=[255]*25)
            self.left_hand_can_send(joint_01, joint_02, joint_03, joint_04, joint_05, joint_06)
            
            # joint_01 = [128, 0, 0, 0] # 大拇指像手心摆动，其他为0
            # joint_02 = [128,128,128,128] # 四指横摆
            # joint_03 = [128,128,128,128] # 四指根部弯曲
            # joint_04 = [128,128,128,128] # 四指中部弯曲
            # joint_05 = [255,0,0,0] # 大拇指中上部弯曲, 其他为0
            # joint_06 = [128,10,50,80] # 四指指尖弯曲
            # self.left_hand_can.set_03(joint_03)
            self.left_hand_sub = rospy.Subscriber("/cb_left_hand_control_cmd", JointState, self.left_hand_cb, queue_size=1)
            
    # 验证右手状态
    def check_right_hand(self):
        if self.right_hand_exists == True:
            self.right_hand_position = [0.0] * 25
            self.right_hand_can = LinkerHandL25Can(can_channel="can0", baudrate=1000000, can_id=0x27, config=self.config)
            self.right_hand_can.set_speed(speed=self.speed)
            ColorMsg(msg=f"设置左手速度:{self.speed}", color="green")
            time.sleep(1)
            #self.left_hand_can.set_finger_torque(torque=[200] * 4)
            joint_01, joint_02, joint_03, joint_04, joint_05, joint_06 = self.pose_slice(p=[159.0, 255.0, 255.0, 255.0, 255.0, 255.0, 112.0, 118.0, 143.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0])
            #joint_01, joint_02, joint_03, joint_04, joint_05, joint_06 = self.pose_slice(p=[255]*25)
            self.right_hand_can_send(joint_01, joint_02, joint_03, joint_04, joint_05, joint_06)
            self.right_hand_sub = rospy.Subscriber("/cb_right_hand_control_cmd", JointState, self.right_hand_cb, queue_size=1)

    

    # 左手接收到话题将数据处理后发送到CAN驱动左手运动
    def left_hand_cb(self, msg):
        position = msg.position
        velocity = msg.velocity
        effort = msg.effort
        if len(position) == 25:
            self.left_hand_position = position
            self.left_hand_velocity = velocity
            self.left_hand_effort = effort
        else:
            ColorMsg(msg="当前为Linker_L25，手指关节应为25个0~255的值", color="red")

    # 右手接收到话题将数据处理后发送到CAN驱动左手运动
    def right_hand_cb(self, msg):
        position = msg.position
        velocity = msg.velocity
        effort = msg.effort
        if len(position) == 24:
            self.right_hand_position = position
            self.right_hand_velocity = velocity
            self.right_hand_effort = effort
        else:
            ColorMsg(msg="当前为Linker_L25，手指关节应为25个0~255的值", color="red")

    

    # 验证接收到的手指关节坐标数值是否在0~255范围之内
    def validate_joint_positions(self, positions):
        # 检查 positions 列表中的每个值是否在 0 到 255 范围内
        for pos in positions:
            if int(pos) < 0 or int(pos) > 255:
                return False
        return True

    def position_send(self):
        while True:
            ''' ---------------左手------------------ '''
            if self.left_hand_exists == True:
                
                # 发送左手数据
                if len(self.left_hand_position) == 24:
                    if any(val != 0 and val != 0.0 for val in self.left_hand_position):
                        joint_01, joint_02, joint_03, joint_04, joint_05, joint_06 = self.pose_slice(p=self.left_hand_position)
                        self.left_hand_can_send(joint_01, joint_02, joint_03, joint_04, joint_05, joint_06)
                        # 获取L20左手错误状态
                        #self.left_hand_can.get_faults()
                        # 获取L20左手当前电流
                        #self.left_hand_can.get_electric_current()
                # 发送左手状态
                self.left_hand_status()
            ''' ---------------右手------------------ '''
            if self.right_hand_exists == True:
                
                # 发送左手数据
                if len(self.right_hand_position) == 24:
                    if any(val != 0 and val != 0.0 for val in self.right_hand_position):
                        joint_01, joint_02, joint_03, joint_04, joint_05, joint_06 = self.pose_slice(p=self.right_hand_position)
                        self.right_hand_can_send(joint_01, joint_02, joint_03, joint_04, joint_05, joint_06)
                        # 获取L20左手错误状态
                        #self.left_hand_can.get_faults()
                        # 获取L20左手当前电流
                        #self.left_hand_can.get_electric_current()
                # 发送左手状态
                self.right_hand_status()

    # L20发送can数据
    def left_hand_can_send(self,joint_01, joint_02, joint_03, joint_04, joint_05, joint_06):
        self.left_hand_can.set_01(joint_01)
        self.left_hand_can.set_02(joint_02)
        self.left_hand_can.set_03(joint_03)
        self.left_hand_can.set_04(joint_04)
        self.left_hand_can.set_05(joint_05)
        if self.leaphand == False:
            self.left_hand_can.set_06(joint_06)
        # self.left_hand_can.set_04(joint_04) # 指尖中部
        # self.left_hand_can.set_07(joint_07) # 指尖移动
        # self.left_hand_can.set_01(joint_01) # 手指根部移动
        # self.left_hand_can.set_06(joint_06) # 横摆移动
        # self.left_hand_can.set_08(joint_08) # 大拇想手心横摆指移动

    # L20发送can数据
    def right_hand_can_send(self,joint_01, joint_02, joint_03, joint_04, joint_05, joint_06):
        self.right_hand_can.set_01(joint_01)
        self.right_hand_can.set_02(joint_02)
        print("------------------------")
        self.right_hand_can.set_03(joint_03)
        self.right_hand_can.set_04(joint_04)
        self.right_hand_can.set_05(joint_05)
        if self.leaphand == False:
            self.right_hand_can.set_06(joint_06)
        # self.right_hand_can.set_04(joint_04) # 指尖中部
        # self.right_hand_can.set_07(joint_07) # 指尖移动
        # self.right_hand_can.set_01(joint_01) # 手指根部移动
        # self.right_hand_can.set_06(joint_06) # 横摆移动
        # self.right_hand_can.set_08(joint_08) # 大拇想手心横摆指移动
    

    

    def pose_slice(self, p):
        """将关节数组切片为手指动作数组"""
        '''
        joint_01 = [255, 0, 0, 0] # 大拇指像手心摆动，其他为0
        joint_02 = [128,128,128,128] # 四指横摆
        joint_03 = [255,255,255,255] # 四指根部弯曲
        joint_04 = [128,128,128,128] # 四指中部弯曲
        joint_05 = [255,0,0,0] # 大拇指中上部弯曲, 其他为0
        joint_06 = [128,10,50,80] # 四指指尖弯曲
        '''
        try:
            if self.leaphand == True:
                # joint_03 = [255,255,255,255] # 四指根部弯曲
                joint_03 = [int(val) for val in p[0:5]]   # 手指根部
                # joint_02 = [128,128,128,128] # 四指横摆
                joint_02 = [int(val) for val in p[5:10]]    # 横摆
                # joint_01 = [255, 0, 0, 0] # 大拇指像手心摆动，其他为0 
                joint_01 = [int(val) for val in p[10:15]]# 大拇指像手心摆动，其他为0
                # joint_04 = [128,128,128,128] # 四指中部弯曲
                joint_04 = [int(val) for val in p[15:20]]    # 指中弯曲
                # joint_06 = [128,10,50,80] # 四指指尖弯曲
                joint_05 = [int(val) for val in p[20:25]]    # 指尖
                joint_06 = []
            else:
                # joint_03 = [255,255,255,255] # 四指根部弯曲
                joint_03 = [int(val) for val in p[0:5]]   # 手指根部
                # joint_02 = [128,128,128,128] # 四指横摆
                joint_02 = [int(val) for val in p[5:10]]    # 横摆
                # joint_01 = [255, 0, 0, 0] # 大拇指像手心摆动，其他为0 
                thumb = [int(val) for val in p[10:15]]
                joint_01 = [thumb[0], 0, 0, 0, 0] # 大拇指像手心摆动，其他为0
                joint_05 = [thumb[1], 0, 0, 0, 0] # 大拇指中上部弯曲, 其他为0
                # joint_04 = [128,128,128,128] # 四指中部弯曲
                joint_04 = [int(val) for val in p[15:20]]    # 指中弯曲
                # joint_06 = [128,10,50,80] # 四指指尖弯曲
                joint_06 = [int(val) for val in p[20:25]]    # 指尖
                joint_03.pop()
                joint_02.pop()
                joint_04.pop()
                joint_06.pop()
            return joint_01, joint_02, joint_03, joint_04, joint_05,joint_06
        except Exception as e:
            print(e)
            ColorMsg(msg="手部关节数据必须是正整数，范围:0~255之间", color="red")
    
    def create_joint_state_msg(self, position, names):
        msg = JointState()
        msg.header = Header()
        msg.header.stamp = rospy.Time.now()
        msg.name = names
        msg.position = list(map(float, position))
        msg.velocity = [0.0] * len(position)
        msg.effort = [0.0] * len(position)
        return msg
    
    def left_hand_status(self):
        if self.left_hand_exists:
            # [206, 0, 0, 0, 140, 142, 160, 171, 221, 214, 224, 239, 239, 242, 247, 181, 229, 0, 0, 0, 247, 130, 114, 130]
            '''
            joint_01 = [255, 0, 0, 0] # 大拇指像手心摆动，其他为0
            joint_02 = [128,128,128,128] # 四指横摆
            joint_03 = [255,255,255,255] # 四指根部弯曲
            joint_04 = [128,128,128,128] # 四指中部弯曲
            joint_05 = [255,0,0,0] # 大拇指中上部弯曲, 其他为0
            joint_06 = [128,10,50,80] # 四指指尖弯曲
            '''
            joint_01, joint_02, joint_03, joint_04, joint_05,joint_06 = self.left_hand_can.get_current_status()
            # current_pose = joint_03 + [0] + joint_02 + [0] + [joint_01[0],joint_05[0]]+[0]*3+joint_04+[0]+joint_06+[0]
            speed = self.left_hand_can.get_speed()
            # finger_torque = self.left_hand_can.get_finger_torque()
            if self.leaphand == False:
                current_pose = joint_01 + joint_02 + joint_03 + joint_04 + joint_05 + joint_06
                ColorMsg(msg=f"左手当前关节位置:{current_pose}", color="green")
            ColorMsg(msg=f"左手当前speed:{speed}", color="green")
            #ColorMsg(msg=f"左手当前扭矩:{finger_torque}", color="green")

    def right_hand_status(self):
        if self.right_hand_exists:
            # [206, 0, 0, 0, 140, 142, 160, 171, 221, 214, 224, 239, 239, 242, 247, 181, 229, 0, 0, 0, 247, 130, 114, 130]
            '''
            joint_01 = [255, 0, 0, 0] # 大拇指像手心摆动，其他为0
            joint_02 = [128,128,128,128] # 四指横摆
            joint_03 = [255,255,255,255] # 四指根部弯曲
            joint_04 = [128,128,128,128] # 四指中部弯曲
            joint_05 = [255,0,0,0] # 大拇指中上部弯曲, 其他为0
            joint_06 = [128,10,50,80] # 四指指尖弯曲
            '''
            joint_01, joint_02, joint_03, joint_04, joint_05,joint_06 = self.right_hand_can.get_current_status()
            # current_pose = joint_03 + [0] + joint_02 + [0] + [joint_01[0],joint_05[0]]+[0]*3+joint_04+[0]+joint_06+[0]
            speed = self.right_hand_can.get_speed()
            # finger_torque = self.right_hand_can.get_finger_torque()
            if self.leaphand == False:
                current_pose = joint_01 + joint_02 + joint_03 + joint_04 + joint_05 + joint_06
                ColorMsg(msg=f"右手当前关节位置:{current_pose}", color="green")
            ColorMsg(msg=f"右手当前speed:{speed}", color="green")
            #ColorMsg(msg=f"左手当前扭矩:{finger_torque}", color="green")

    def load_yaml(self):
        try:
            settings_yaml_path = package_path + "/config/setting.yaml"
            with open(settings_yaml_path, 'r', encoding='utf-8') as file:
                config = yaml.safe_load(file)
                self.config = config
                self.sdk_version = config["VERSION"]
                self.left_hand_exists = config['LINKER_HAND']['LEFT_HAND']['EXISTS']
                self.left_hand_names = config['LINKER_HAND']['LEFT_HAND']['NAME']
                self.left_hand_joint = config['LINKER_HAND']['LEFT_HAND']['JOINT']
                self.left_hand_force = config['LINKER_HAND']['LEFT_HAND']['TOUCH']
                self.right_hand_exists = config['LINKER_HAND']['RIGHT_HAND']['EXISTS']
                self.right_hand_names = config['LINKER_HAND']['RIGHT_HAND']['NAME']
                self.right_hand_joint = config['LINKER_HAND']['RIGHT_HAND']['JOINT']
                self.right_hand_force = config['LINKER_HAND']['RIGHT_HAND']['TOUCH']
                self.password = config['PASSWORD']
        except Exception as e:
            rospy.logerr(f"Error reading setting.yaml: {e}")
    def open_can0(self):
        try:
            # 检查 can0 接口是否已存在并处于 up 状态
            result = subprocess.run(
                ["ip", "link", "show", "can0"],
                check=True,
                text=True,
                capture_output=True
            )
            if "state UP" in result.stdout:
                rospy.loginfo("CAN接口已经是 UP 状态")
                return
            # 如果没有处于 UP 状态，则配置接口
            subprocess.run(
                ["sudo", "-S", "ip", "link", "set", "can0", "up", "type", "can", "bitrate", "1000000"],
                input=f"{self.password}\n",
                check=True,
                text=True,
                capture_output=True
            )
            rospy.loginfo("CAN接口设置成功")
        except subprocess.CalledProcessError as e:
            rospy.logerr(f"CAN接口设置失败: {e.stderr}")
        except Exception as e:
            rospy.logerr(f"发生错误: {str(e)}")

    def is_can_up_sysfs(self, interface="can0"):
        # 检查接口目录是否存在
        if not os.path.exists(f"/sys/class/net/{interface}"):
            return False
        # 读取接口状态
        try:
            with open(f"/sys/class/net/{interface}/operstate", "r") as f:
                state = f.read().strip()
            if state == "up":
                self.can_status = True
            return self.can_status
        except Exception as e:
            print(f"Error reading CAN interface state: {e}")
            return False
    def shutdown(self):
        # self.lh_l.close_can_interface()
        # self.lh_r.close_can_interface()
        # self.shutdown_flag.set()
        # self.can_left_thread.join()
        # self.can_right_thread.join()
        pass
    
def signal_handler(sig, frame):
    # rospy.loginfo("Shutting down ROS node...")
    # rospy.signal_shutdown("SIGINT received")
    # rospy.on_shutdown()
    sys.exit(0)  # 正常退出程序
if __name__ == '__main__':
    rospy.init_node('linker_hand_sdk_l25', anonymous=True)
    hand = rospy.get_param('~hand', default="leaphand")  # 默认获取全局参数
    if hand == "leaphand":
        param = True
    else:
        param = False
    rospy.Rate(60)
    # 注册信号处理器
    signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # kill 命令
    
    try:
        # 检查can端口如果没有打开则等待重试，一般是usb转can设备没有插上
        while True:
            can = OpenCan()
            can.open_can0()
            time.sleep(0.001)
            o = can.is_can_up_sysfs()
            if o == False:
                ColorMsg(msg=f"can0端口打开失败，3秒后自动重试", color="red")
                time.sleep(3)
            else:
                break
        linker_hand = LinkerHandL25(leaphand=param)
        rospy.spin()
    except rospy.ROSInterruptException:
        linker_hand.shutdown()
        rospy.loginfo("Node shutdown complete.")